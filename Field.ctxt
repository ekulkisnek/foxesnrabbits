#BlueJ class context
comment0.target=Field
comment0.text=\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\n\ Each\ position\ is\ able\ to\ store\ a\ single\ animal\ and\ a\ number\ of\ Krill\ in\ it.\n\ Also\ keeps\ track\ of\ day\ and\ night\ and\ weather\ conditions\ affect\ the\ growth\n\ of\ krill\n\ \n\ @author\ Mohammad\ Talal\ Hassan\ and\ Luke\ Kensik\n
comment1.params=depth\ width
comment1.target=Field(int,\ int)
comment1.text=\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\n\ @param\ depth\ The\ depth\ of\ the\ field.\n\ @param\ width\ The\ width\ of\ the\ field.\n
comment10.params=probabilty
comment10.target=void\ growKrill(double)
comment10.text=\n\ Grows\ krill\ in\ each\ position\ determined\ by\ the\ probabilty\ passed\ into\n\ the\ parameter\n\ @param\ krill\ grow\ probability\ as\ double\n
comment11.params=appetite\ location
comment11.target=int\ eatKrill(int,\ Location)
comment11.text=\n\ Checks\ how\ much\ krill\ is\ available\ in\ a\ position\ and\ returns\ \n\ how\ much\ was\ requested\ if\ no.ofKrill>\=appetite\ or\ the\ remaining\ \n\ krill\ in\ that\ position\n\ @param\ the\ number\ of\ krill\ you\ want\ to\ eat\n\ @param\ location\ of\ krill\ to\ eat\n\ @return\ a\ number\ of\ krill\ in\ a\ position\ in\ the\ field\n
comment12.params=amount\ location
comment12.target=void\ eatenKrill(int,\ Location)
comment12.text=\n\ Removes\ the\ amount\ of\ krill\ that\ was\ eaten\ from\ specified\ location\n\ @param\ amount\ of\ eaten\ krill\ as\ int\n\ @param\ location\ of\ krill\ as\ location\n
comment13.params=location
comment13.target=void\ clear(Location)
comment13.text=\n\ Clear\ the\ given\ location.\n\ @param\ location\ The\ location\ to\ clear.\n
comment14.params=animal\ row\ col
comment14.target=void\ place(java.lang.Object,\ int,\ int)
comment14.text=\n\ Place\ an\ animal\ at\ the\ given\ location.\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\n\ be\ lost.\n\ @param\ animal\ The\ animal\ to\ be\ placed.\n\ @param\ row\ Row\ coordinate\ of\ the\ location.\n\ @param\ col\ Column\ coordinate\ of\ the\ location.\n
comment15.params=animal\ location
comment15.target=void\ place(java.lang.Object,\ Location)
comment15.text=\n\ Place\ an\ animal\ at\ the\ given\ location.\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\n\ be\ lost.\n\ @param\ animal\ The\ animal\ to\ be\ placed.\n\ @param\ location\ Where\ to\ place\ the\ animal.\n
comment16.params=location
comment16.target=java.lang.Object\ getObjectAt(Location)
comment16.text=\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\n\ @param\ location\ Where\ in\ the\ field.\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment17.params=row\ col
comment17.target=java.lang.Object\ getObjectAt(int,\ int)
comment17.text=\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\n\ @param\ row\ The\ desired\ row.\n\ @param\ col\ The\ desired\ column.\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment18.params=location
comment18.target=int\ getKrillAt(Location)
comment18.text=\n\ Return\ the\ number\ of\ krill\ at\ the\ given\ location,\ if\ any.\n\ @param\ location\ Where\ in\ the\ field.\n\ @return\ The\ number\ of\ krill\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment19.params=row\ col
comment19.target=int\ getKrillAt(int,\ int)
comment19.text=\n\ Return\ the\ number\ of\ krill\ at\ the\ given\ location,\ if\ any.\n\ @param\ row\ The\ desired\ row.\n\ @param\ col\ The\ desired\ column.\n\ @return\ The\ number\ of\ krill\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n
comment2.params=
comment2.target=void\ updateWeather()
comment2.text=\n\ Calls\ simulateWeather\ method\ of\ weather\ class\n\ If\ no\ current\ state\ of\ weather\ has\ random\ chance\ weather\ occurs\n\ Otherwise\ checks\ if\ weather\ is\ due\ to\ end\ and\ if\ so,\ ends\ it\n
comment20.params=location
comment20.target=Location\ randomAdjacentLocation(Location)
comment20.text=\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\n\ given\ location,\ or\ is\ the\ same\ location.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\n
comment21.params=location
comment21.target=java.util.List\ getFreeAdjacentLocations(Location)
comment21.text=\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\n
comment22.params=location
comment22.target=Location\ freeAdjacentLocation(Location)
comment22.text=\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\n\ given\ location.\ If\ there\ is\ none,\ return\ null.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\n
comment23.params=location
comment23.target=java.util.List\ adjacentLocations(Location)
comment23.text=\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\n\ The\ list\ will\ not\ include\ the\ location\ itself.\n\ All\ locations\ will\ lie\ within\ the\ grid.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\n
comment24.params=
comment24.target=int\ getDepth()
comment24.text=\n\ Return\ the\ depth\ of\ the\ field.\n\ @return\ The\ depth\ of\ the\ field.\n
comment25.params=
comment25.target=int\ getWidth()
comment25.text=\n\ Return\ the\ width\ of\ the\ field.\n\ @return\ The\ width\ of\ the\ field.\n
comment3.params=
comment3.target=Weather\ getWeather()
comment3.text=\n\ Returns\ the\ weather\ of\ the\ field\n\ @return\ the\ weather\ of\ the\ field\n
comment4.params=
comment4.target=void\ toggleDay()
comment4.text=\n\ Toggles\ between\ day\ and\ night\n
comment5.params=
comment5.target=boolean\ getIsDay()
comment5.text=\n\ Returns\ true\ if\ it's\ daytime\n\ @return\ true\ if\ it's\ day\n
comment6.params=
comment6.target=void\ clear()
comment6.text=\n\ Empty\ the\ field.\n
comment7.params=depth\ width
comment7.target=void\ populateKrill(int,\ int)
comment7.text=\n\ Assigns\ a\ random\ number\ of\ krill\ to\ each\ position\ in\ the\ field\n\ @param\ depth\ of\ field\ \n\ @param\ width\ of\ field\ \n
comment8.params=
comment8.target=void\ resetKrill()
comment8.text=\n\ Resets\n
comment9.params=
comment9.target=void\ growKrill()
comment9.text=\n\ Checks\ the\ current\ weather\ and\ then\ grows\ krill\ in\ each\ position\n\ based\ on\ the\ current\ weather\n
numComments=26
